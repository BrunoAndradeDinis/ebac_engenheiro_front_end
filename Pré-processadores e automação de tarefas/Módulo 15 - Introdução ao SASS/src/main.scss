@use "config/reset.scss";
@use "config/variaveis.scss";
@use "sass:math";

@mixin elementoForm($margin: 1rem) {
  // passamdo a propriedade a valor default/padr√£o
  padding: 0.5rem;
  display: block;
  width: 100%;
  margin-bottom: $margin;
}

@function pixelParaEm($alvoEmPixel, $contextoEmPixel: 16px){
  @return math.div($alvoEmPixel, $contextoEmPixel)+em;
}

body {
  background-color: #eee;
}

.container {
  max-width: 1024px;
  width: 100%;
  margin: 0 auto;
}

header {
  padding: 1rem 0;
  background-color: variaveis.$corPrincipal;
  text-align: center;
  color: antiquewhite;
}

.form-container {
  height: calc(100vh - 70px);
  // background-color: orangered;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-width: 760px;
  margin: 0 auto;

  h2 {
    font-size: pixelParaEm(48px);
    text-align: center;
  }

  form {
    width: 100%;
    max-width: 480px;
    margin-top: 40px;

    label {
      font-weight: bold;
      cursor: pointer;

    }

    input {
      @include elementoForm(1rem);
      background-color: transparent;
      border: none;
      border-bottom: 3px solid variaveis.$corPrincipal;
    }
    button {
      @include elementoForm();
      background-color: variaveis.$corSecundaria;
      font-size: pixelParaEm(18px);
      font-weight: bold;
      text-transform: uppercase;
      border: none;
      cursor: pointer;
      color: antiquewhite;

      &:hover{
        background-color: darken($color: variaveis.$corSecundaria, $amount: 15%);
      }
    }
  }
}


@media screen and (max-width: variaveis.$mobile){
  .container{
    max-width: 80%;
  }
}

/*  
  medida alvo / medida atual do contexto 
  medida alvo / 16
  32px / 16px = 2em
*/